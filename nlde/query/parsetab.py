
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALL AND ASC BOOLEAN BOUND BY BYTE COLON COMA CONSTANT CONTAINS DATATYPE DATETIME DECIMAL DESC DISTINCT DIV DOUBLE EQUALS FILTER FLOAT GREATER GREATEREQ ID INT INTEGER ISBLANK ISIRI ISLITERAL ISURI LANG LANGMATCHES LCASE LESS LESSEQ LIMIT LKEY LONG LPAR MINUS NEG NEGATIVEINT NEQUALS NONNEGINT NONPOSINT NUMBER OFFSET OPTIONAL OR ORDER PLUS POINT POSITIVEINT PREFIX REGEX RKEY RPAR SAMETERM SELECT SHORT STR STRING TIMES UCASE UNION UNSIGNEDBYTE UNSIGNEDINT UNSIGNEDLONG UNSIGNEDSHORT UPPERCASE URI VARIABLE WHERE\n    parse_sparql : prefix_list query order_by limit offset\n    \n    prefix_list : prefix prefix_list\n    \n    prefix_list : empty\n    \n    empty :\n    \n    prefix : PREFIX ID COLON URI\n    \n    uri : ID COLON ID\n    \n    uri : ID COLON URI\n    \n    uri : URI\n    \n    order_by : ORDER BY var_order_list desc_var\n    \n    order_by : empty\n    \n    var_order_list : empty\n    \n    var_order_list : var_order_list desc_var\n    \n    desc_var : DESC LPAR VARIABLE RPAR\n    \n    desc_var : VARIABLE\n    \n    desc_var : ASC LPAR VARIABLE RPAR\n    \n    desc_var : unary_func LPAR desc_var RPAR\n    \n    limit : LIMIT NUMBER\n    \n    limit : empty\n    \n    offset : OFFSET NUMBER\n    \n    offset : empty\n    \n    query : SELECT distinct var_list WHERE LKEY group_graph_pattern RKEY\n    \n    query : SELECT distinct ALL WHERE LKEY group_graph_pattern RKEY\n    \n    distinct : DISTINCT\n    \n    distinct : empty\n    \n    group_graph_pattern : union_block\n    \n    union_block : pjoin_block rest_union_block POINT pjoin_block\n    \n    union_block : pjoin_block rest_union_block pjoin_block\n    \n    union_block : pjoin_block rest_union_block\n    \n    pjoin_block : LKEY join_block RKEY\n    \n    pjoin_block : join_block\n    \n    pjoin_block : empty\n    \n    rest_union_block : empty\n    \n    rest_union_block : UNION LKEY join_block rest_union_block RKEY rest_union_block\n    \n    join_block : LKEY union_block RKEY rest_join_block\n    \n    join_block : bgp rest_join_block\n    \n    rest_join_block : empty\n    \n    rest_join_block : POINT bgp rest_join_block\n    \n    rest_join_block : bgp rest_join_block\n    \n    bgp :  LKEY bgp UNION bgp rest_union_block RKEY\n    \n    bgp : bgp UNION bgp rest_union_block\n    \n    bgp : triple\n    \n    bgp : FILTER LPAR expression RPAR\n    \n    bgp : FILTER express_rel\n    \n    bgp : OPTIONAL LKEY group_graph_pattern RKEY\n    \n    bgp : LKEY join_block RKEY\n    \n    expression : express_rel LOGOP expression\n    \n    expression : express_rel\n    \n    expression : LPAR expression RPAR\n    \n    express_rel : express_arg RELOP express_rel\n    \n    express_rel : express_arg\n    \n    express_rel : LPAR express_rel RPAR\n    \n    express_rel : NEG LPAR expression RPAR\n    \n    express_rel : NEG express_rel\n    \n    express_arg : uri\n    \n    express_arg : VARIABLE\n    \n    express_arg : CONSTANT\n    \n    express_arg : NUMBER\n    \n    express_arg : NUMBER POINT NUMBER\n    \n    express_arg : REGEX LPAR express_arg COMA pattern_arg regex_flag\n    \n    regex_flag : RPAR\n    \n    regex_flag : COMA pattern_arg RPAR\n    \n    pattern_arg : CONSTANT\n    \n    express_arg : binary_func LPAR express_arg COMA express_arg RPAR\n    \n    express_arg : unary_func LPAR express_arg RPAR\n    \n    express_arg : UNARYOP express_arg\n    \n    express_arg : express_arg ARITOP express_arg\n    \n    express_arg : LPAR express_arg RPAR\n    \n    express_arg : express_arg RELOP express_arg\n    \n    ARITOP : PLUS\n    \n    ARITOP : MINUS\n    \n    ARITOP : TIMES\n    \n    ARITOP : DIV\n    \n    UNARYOP : PLUS\n    \n    UNARYOP : MINUS\n    \n    LOGOP : AND\n    \n    LOGOP : OR\n    \n    RELOP : EQUALS\n    \n    RELOP : LESS\n    \n    RELOP : LESSEQ\n    \n    RELOP : GREATER\n    \n    RELOP : GREATEREQ\n    \n    RELOP : NEQUALS\n    \n    binary_func : REGEX\n    \n    binary_func : SAMETERM\n    \n    binary_func : LANGMATCHES\n    \n    binary_func : CONSTANT\n    \n    binary_func : CONTAINS\n    \n    unary_func : BOUND\n    \n    unary_func : ISIRI\n    \n    unary_func : ISURI\n    \n    unary_func : ISBLANK\n    \n    unary_func : ISLITERAL\n    \n    unary_func : LANG\n    \n    unary_func : DATATYPE\n    \n    unary_func : STR\n    \n    unary_func : UPPERCASE\n    \n    unary_func : DOUBLE\n               | INTEGER\n               | DECIMAL\n               | FLOAT\n               | STRING\n               | BOOLEAN\n               | DATETIME\n               | NONPOSINT\n               | NEGATIVEINT\n               | LONG\n               | INT\n               | SHORT\n               | BYTE\n               | NONNEGINT\n               | UNSIGNEDLONG\n               | UNSIGNEDINT\n               | UNSIGNEDSHORT\n               | UNSIGNEDBYTE\n               | POSITIVEINT\n    \n    unary_func : ID COLON ID\n    \n    unary_func : uri\n    \n    unary_func : UCASE\n    \n    unary_func : LCASE\n    \n    var_list : var_list VARIABLE\n    \n    var_list : VARIABLE\n    \n    triple : subject predicate object\n    \n    predicate : ID\n    \n    predicate : uri\n    \n    predicate : VARIABLE\n    \n    subject : uri\n    \n    subject : VARIABLE\n    \n    object : uri\n    \n    object : VARIABLE\n    \n    object : CONSTANT\n    '
    
_lr_action_items = {'LPAR':([35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,59,60,61,63,64,65,66,67,68,69,70,71,72,92,95,96,119,120,121,124,125,127,128,129,130,133,134,135,136,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,213,215,224,],[-105,-108,-90,-93,-113,-114,-94,-96,-112,-119,-106,-91,75,-92,-98,-101,-99,-8,-103,-95,-109,-115,77,-110,-118,-117,-107,-97,-100,-88,-89,-102,78,-104,-111,119,-6,-7,161,-86,165,-74,168,-84,-73,-85,181,183,-87,-117,185,161,161,183,208,-78,-77,-70,-81,-79,-69,183,-72,-71,-82,-80,183,183,183,-75,161,-76,208,-6,183,183,]),'SHORT':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,36,-11,-14,-12,36,36,36,36,-74,-73,36,-15,-13,-16,36,36,36,36,-78,-77,-70,-81,-79,-69,36,-72,-71,-82,-80,36,36,36,-75,36,-76,36,36,36,]),'CONSTANT':([52,92,96,99,100,101,102,119,121,124,128,133,160,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,226,239,],[-8,120,-7,141,-124,-125,-123,120,120,-74,-73,120,-6,120,120,120,120,-78,-77,-70,-81,-79,-69,120,-72,-71,-82,-80,120,120,120,-75,120,-76,120,120,120,233,233,]),'LESS':([52,96,120,122,123,126,135,162,184,199,206,207,209,211,212,213,214,216,227,228,232,236,237,238,241,],[-8,-7,-56,-57,-55,170,-54,170,170,-67,-58,170,170,170,170,-6,170,170,170,-64,170,-63,-59,-60,-61,]),'NEG':([92,119,121,161,165,169,170,171,173,174,179,180,200,201,203,208,],[121,121,121,121,121,121,-78,-77,-81,-79,-82,-80,-75,121,-76,121,]),'NEQUALS':([52,96,120,122,123,126,135,162,184,199,206,207,209,211,212,213,214,216,227,228,232,236,237,238,241,],[-8,-7,-56,-57,-55,179,-54,179,179,-67,-58,179,179,179,179,-6,179,179,179,-64,179,-63,-59,-60,-61,]),'NUMBER':([18,26,92,119,121,124,128,133,161,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[25,34,122,122,122,-74,-73,122,122,122,206,122,122,-78,-77,-70,-81,-79,-69,122,-72,-71,-82,-80,122,122,122,-75,122,-76,122,122,122,]),'BOUND':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,67,-11,-14,-12,67,67,67,67,-74,-73,67,-15,-13,-16,67,67,67,67,-78,-77,-70,-81,-79,-69,67,-72,-71,-82,-80,67,67,67,-75,67,-76,67,67,67,]),'COMA':([52,96,120,122,123,135,184,199,206,207,211,212,213,227,228,233,234,236,237,238,241,],[-8,-7,-56,-57,-55,-54,-65,-67,-58,224,-66,226,-6,-68,-64,-62,239,-63,-59,-60,-61,]),'PREFIX':([0,3,17,],[1,1,-5,]),'ISURI':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,37,-11,-14,-12,37,37,37,37,-74,-73,37,-15,-13,-16,37,37,37,37,-78,-77,-70,-81,-79,-69,37,-72,-71,-82,-80,37,37,37,-75,37,-76,37,37,37,]),'LIMIT':([8,11,13,55,62,110,137,138,139,140,],[-4,18,-10,-14,-9,-22,-21,-15,-13,-16,]),'DIV':([52,96,120,122,123,126,135,162,184,199,206,207,209,211,212,213,214,216,227,228,232,236,237,238,241,],[-8,-7,-56,-57,-55,177,-54,177,177,-67,-58,177,177,177,177,-6,177,177,177,-64,177,-63,-59,-60,-61,]),'MINUS':([52,92,96,119,120,121,122,123,124,126,128,133,135,161,162,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,184,185,199,200,201,203,206,207,208,209,211,212,213,214,215,216,224,227,228,232,236,237,238,241,],[-8,124,-7,124,-56,124,-57,-55,-74,172,-73,124,-54,124,172,124,124,124,-78,-77,-70,-81,-79,-69,124,-72,-71,-82,-80,124,124,172,124,-67,-75,124,-76,-58,172,124,172,172,172,-6,172,124,172,124,172,-64,172,-63,-59,-60,-61,]),'ISBLANK':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,46,-11,-14,-12,46,46,46,46,-74,-73,46,-15,-13,-16,46,46,46,46,-78,-77,-70,-81,-79,-69,46,-72,-71,-82,-80,46,46,46,-75,46,-76,46,46,46,]),'SELECT':([0,3,4,5,7,17,],[-4,-4,9,-3,-2,-5,]),'LKEY':([31,33,52,73,74,80,82,83,84,86,87,88,96,103,104,105,106,107,108,109,111,112,113,115,116,117,120,122,123,126,132,135,141,142,143,144,145,146,147,149,150,152,153,155,156,157,158,159,160,166,184,186,187,188,189,190,191,193,195,196,197,199,202,204,206,209,210,211,213,217,219,223,227,228,230,231,235,236,237,238,241,],[73,74,-8,88,88,-41,106,-30,109,-4,-31,116,-7,106,106,-36,149,106,-35,88,152,88,-32,-30,158,106,-56,-57,-55,-50,-43,-54,-130,-122,-128,-129,-38,106,106,158,-4,193,88,106,-29,-30,158,106,-6,-53,-65,-37,-45,-30,217,-40,-44,158,-34,-29,-4,-67,-51,-42,-58,-50,-49,-66,-6,193,-40,-52,-68,-64,-4,-39,-33,-63,-59,-60,-61,]),'LANG':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,38,-11,-14,-12,38,38,38,38,-74,-73,38,-15,-13,-16,38,38,38,38,-78,-77,-70,-81,-79,-69,38,-72,-71,-82,-80,38,38,38,-75,38,-76,38,38,38,]),'ASC':([21,29,30,55,62,78,138,139,140,],[-4,47,-11,-14,-12,47,-15,-13,-16,]),'UNSIGNEDBYTE':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,40,-11,-14,-12,40,40,40,40,-74,-73,40,-15,-13,-16,40,40,40,40,-78,-77,-70,-81,-79,-69,40,-72,-71,-82,-80,40,40,40,-75,40,-76,40,40,40,]),'TIMES':([52,96,120,122,123,126,135,162,184,199,206,207,209,211,212,213,214,216,227,228,232,236,237,238,241,],[-8,-7,-56,-57,-55,178,-54,178,178,-67,-58,178,178,178,178,-6,178,178,178,-64,178,-63,-59,-60,-61,]),'POINT':([52,73,74,80,82,83,86,87,88,96,103,105,108,109,112,113,115,116,117,120,122,123,126,132,135,141,142,143,144,145,146,147,149,150,155,156,157,158,160,166,184,186,187,188,190,191,193,195,196,197,199,202,204,206,209,210,211,213,219,223,227,228,230,231,235,236,237,238,241,],[-8,-4,-4,-41,104,-30,-4,-31,-4,-7,104,-36,-35,-4,153,-32,-30,-4,104,-56,167,-55,-50,-43,-54,-130,-122,-128,-129,-38,104,104,-4,-4,104,-29,-30,-4,-6,-53,-65,-37,-45,-30,-40,-44,-4,-34,-29,-4,-67,-51,-42,-58,-50,-49,-66,-6,-40,-52,-68,-64,-4,-39,-33,-63,-59,-60,-61,]),'DISTINCT':([9,],[15,]),'UPPERCASE':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,42,-11,-14,-12,42,42,42,42,-74,-73,42,-15,-13,-16,42,42,42,42,-78,-77,-70,-81,-79,-69,42,-72,-71,-82,-80,42,42,42,-75,42,-76,42,42,42,]),'UNSIGNEDINT':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,43,-11,-14,-12,43,43,43,43,-74,-73,43,-15,-13,-16,43,43,43,43,-78,-77,-70,-81,-79,-69,43,-72,-71,-82,-80,43,43,43,-75,43,-76,43,43,43,]),'SAMETERM':([92,119,121,124,128,133,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[127,127,127,-74,-73,127,127,127,127,127,-78,-77,-70,-81,-79,-69,127,-72,-71,-82,-80,127,127,127,-75,127,-76,127,127,127,]),'LCASE':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,44,-11,-14,-12,44,44,44,44,-74,-73,44,-15,-13,-16,44,44,44,44,-78,-77,-70,-81,-79,-69,44,-72,-71,-82,-80,44,44,44,-75,44,-76,44,44,44,]),'LONG':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,45,-11,-14,-12,45,45,45,45,-74,-73,45,-15,-13,-16,45,45,45,45,-78,-77,-70,-81,-79,-69,45,-72,-71,-82,-80,45,45,45,-75,45,-76,45,45,45,]),'ORDER':([8,110,137,],[12,-22,-21,]),'UNSIGNEDSHORT':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,39,-11,-14,-12,39,39,39,39,-74,-73,39,-15,-13,-16,39,39,39,39,-78,-77,-70,-81,-79,-69,39,-72,-71,-82,-80,39,39,39,-75,39,-76,39,39,39,]),'GREATEREQ':([52,96,120,122,123,126,135,162,184,199,206,207,209,211,212,213,214,216,227,228,232,236,237,238,241,],[-8,-7,-56,-57,-55,173,-54,173,173,-67,-58,173,173,173,173,-6,173,173,173,-64,173,-63,-59,-60,-61,]),'LESSEQ':([52,96,120,122,123,126,135,162,184,199,206,207,209,211,212,213,214,216,227,228,232,236,237,238,241,],[-8,-7,-56,-57,-55,174,-54,174,174,-67,-58,174,174,174,174,-6,174,174,174,-64,174,-63,-59,-60,-61,]),'COLON':([6,58,90,102,131,],[10,76,118,118,182,]),'LANGMATCHES':([92,119,121,124,128,133,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[129,129,129,-74,-73,129,129,129,129,129,-78,-77,-70,-81,-79,-69,129,-72,-71,-82,-80,129,129,129,-75,129,-76,129,129,129,]),'ISLITERAL':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,48,-11,-14,-12,48,48,48,48,-74,-73,48,-15,-13,-16,48,48,48,48,-78,-77,-70,-81,-79,-69,48,-72,-71,-82,-80,48,48,48,-75,48,-76,48,48,48,]),'OPTIONAL':([52,73,74,80,82,83,86,87,88,96,103,104,105,106,107,108,109,112,113,115,116,117,120,122,123,126,132,135,141,142,143,144,145,146,147,149,150,152,153,155,156,157,158,159,160,166,184,186,187,188,189,190,191,193,195,196,197,199,202,204,206,209,210,211,213,217,219,223,227,228,230,231,235,236,237,238,241,],[-8,84,84,-41,84,-30,-4,-31,84,-7,84,84,-36,84,84,-35,84,84,-32,-30,84,84,-56,-57,-55,-50,-43,-54,-130,-122,-128,-129,-38,84,84,84,-4,84,84,84,-29,-30,84,84,-6,-53,-65,-37,-45,-30,84,-40,-44,84,-34,-29,-4,-67,-51,-42,-58,-50,-49,-66,-6,84,-40,-52,-68,-64,-4,-39,-33,-63,-59,-60,-61,]),'$end':([2,8,11,13,19,20,25,27,28,34,55,62,110,137,138,139,140,],[0,-4,-4,-10,-4,-18,-17,-1,-20,-19,-14,-9,-22,-21,-15,-13,-16,]),'PLUS':([52,92,96,119,120,121,122,123,124,126,128,133,135,161,162,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,184,185,199,200,201,203,206,207,208,209,211,212,213,214,215,216,224,227,228,232,236,237,238,241,],[-8,128,-7,128,-56,128,-57,-55,-74,175,-73,128,-54,128,175,128,128,128,-78,-77,-70,-81,-79,-69,128,-72,-71,-82,-80,128,128,175,128,-67,-75,128,-76,-58,175,128,175,175,175,-6,175,128,175,128,175,-64,175,-63,-59,-60,-61,]),'CONTAINS':([92,119,121,124,128,133,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[134,134,134,-74,-73,134,134,134,134,134,-78,-77,-70,-81,-79,-69,134,-72,-71,-82,-80,134,134,134,-75,134,-76,134,134,134,]),'RPAR':([52,55,94,96,97,98,120,122,123,126,135,138,139,140,162,163,164,166,184,198,199,202,205,206,209,210,211,213,214,216,220,221,222,223,225,227,228,232,233,234,236,237,238,240,241,],[-8,-14,138,-7,139,140,-56,-57,-55,-50,-54,-15,-13,-16,199,202,204,-53,-65,220,-67,-51,223,-58,-50,-49,-66,-6,199,228,-48,-47,-46,-52,202,-68,-64,236,-62,238,-63,-59,-60,241,-61,]),'STRING':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,50,-11,-14,-12,50,50,50,50,-74,-73,50,-15,-13,-16,50,50,50,50,-78,-77,-70,-81,-79,-69,50,-72,-71,-82,-80,50,50,50,-75,50,-76,50,50,50,]),'UNION':([52,73,74,80,82,83,86,87,88,96,103,105,108,109,113,115,116,117,120,122,123,126,132,135,141,142,143,144,145,146,147,149,150,155,156,157,158,160,166,184,186,187,188,190,191,192,193,195,196,197,199,202,204,206,209,210,211,213,219,223,227,228,229,230,231,235,236,237,238,241,],[-8,-4,-4,-41,107,-30,111,-31,-4,-7,107,-36,-35,-4,-32,-30,-4,159,-56,-57,-55,-50,-43,-54,-130,-122,-128,-129,-38,107,159,-4,189,-4,-29,-30,-4,-6,-53,-65,-37,-45,-30,-40,-44,111,-4,-34,-29,189,-67,-51,-42,-58,-50,-49,-66,-6,-40,-52,-68,-64,111,111,-39,-33,-63,-59,-60,-61,]),'DECIMAL':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,51,-11,-14,-12,51,51,51,51,-74,-73,51,-15,-13,-16,51,51,51,51,-78,-77,-70,-81,-79,-69,51,-72,-71,-82,-80,51,51,51,-75,51,-76,51,51,51,]),'RKEY':([52,73,74,79,80,82,83,85,86,87,88,93,96,103,105,108,109,112,113,114,115,116,117,120,122,123,126,132,135,141,142,143,144,145,146,147,148,149,150,151,153,154,155,156,157,158,160,166,184,186,187,188,190,191,192,193,194,195,196,197,199,202,204,206,209,210,211,213,218,219,223,227,228,229,230,231,235,236,237,238,241,],[-8,-4,-4,-25,-41,-4,-30,110,-4,-31,-4,137,-7,-4,-36,-35,-4,-4,-32,155,156,-4,-4,-56,-57,-55,-50,-43,-54,-130,-122,-128,-129,-38,-4,-4,187,-4,-4,191,-4,-27,-4,-29,196,-4,-6,-53,-65,-37,-45,187,-40,-44,-4,-4,-26,-34,-29,-4,-67,-51,-42,-58,-50,-49,-66,-6,230,231,-52,-68,-64,187,-4,-39,-33,-63,-59,-60,-61,]),'URI':([10,21,29,30,52,55,62,73,74,76,78,80,81,82,83,86,87,88,89,91,92,96,99,100,101,102,103,104,105,106,107,108,109,112,113,115,116,117,118,119,120,121,122,123,124,126,128,132,133,135,138,139,140,141,142,143,144,145,146,147,149,150,152,153,155,156,157,158,159,160,161,165,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,193,195,196,197,199,200,201,202,203,204,206,208,209,210,211,213,215,217,219,223,224,227,228,230,231,235,236,237,238,241,],[17,-4,52,-11,-8,-14,-12,52,52,96,52,-41,52,52,-30,-4,-31,52,-127,-126,52,-7,52,-124,-125,-123,52,52,-36,52,52,-35,52,52,-32,-30,52,52,96,52,-56,52,-57,-55,-74,-50,-73,-43,52,-54,-15,-13,-16,-130,-122,-128,-129,-38,52,52,52,-4,52,52,52,-29,-30,52,52,-6,52,52,-53,52,52,-78,-77,-70,-81,-79,-69,52,-72,-71,-82,-80,52,96,52,-65,52,-37,-45,-30,52,-40,-44,52,-34,-29,-4,-67,-75,52,-51,-76,-42,-58,52,-50,-49,-66,-6,52,52,-40,-52,52,-68,-64,-4,-39,-33,-63,-59,-60,-61,]),'DATETIME':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,53,-11,-14,-12,53,53,53,53,-74,-73,53,-15,-13,-16,53,53,53,53,-78,-77,-70,-81,-79,-69,53,-72,-71,-82,-80,53,53,53,-75,53,-76,53,53,53,]),'EQUALS':([52,96,120,122,123,126,135,162,184,199,206,207,209,211,212,213,214,216,227,228,232,236,237,238,241,],[-8,-7,-56,-57,-55,171,-54,171,171,-67,-58,171,171,171,171,-6,171,171,171,-64,171,-63,-59,-60,-61,]),'REGEX':([92,119,121,124,128,133,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[130,130,130,-74,-73,130,130,130,130,130,-78,-77,-70,-81,-79,-69,130,-72,-71,-82,-80,130,130,130,-75,130,-76,130,130,130,]),'STR':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,54,-11,-14,-12,54,54,54,54,-74,-73,54,-15,-13,-16,54,54,54,54,-78,-77,-70,-81,-79,-69,54,-72,-71,-82,-80,54,54,54,-75,54,-76,54,54,54,]),'OFFSET':([8,11,13,19,20,25,55,62,110,137,138,139,140,],[-4,-4,-10,26,-18,-17,-14,-9,-22,-21,-15,-13,-16,]),'VARIABLE':([9,14,15,16,21,23,24,29,30,32,52,55,62,73,74,75,77,78,80,81,82,83,86,87,88,89,91,92,96,99,100,101,102,103,104,105,106,107,108,109,112,113,115,116,117,119,120,121,122,123,124,126,128,132,133,135,138,139,140,141,142,143,144,145,146,147,149,150,152,153,155,156,157,158,159,160,161,165,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,184,185,186,187,188,189,190,191,193,195,196,197,199,200,201,202,203,204,206,208,209,210,211,213,215,217,219,223,224,227,228,230,231,235,236,237,238,241,],[-4,23,-23,-24,-4,-121,32,55,-11,-120,-8,-14,-12,89,89,94,97,55,-41,101,89,-30,-4,-31,89,-127,-126,123,-7,144,-124,-125,-123,89,89,-36,89,89,-35,89,89,-32,-30,89,89,123,-56,123,-57,-55,-74,-50,-73,-43,123,-54,-15,-13,-16,-130,-122,-128,-129,-38,89,89,89,-4,89,89,89,-29,-30,89,89,-6,123,123,-53,123,123,-78,-77,-70,-81,-79,-69,123,-72,-71,-82,-80,123,123,-65,123,-37,-45,-30,89,-40,-44,89,-34,-29,-4,-67,-75,123,-51,-76,-42,-58,123,-50,-49,-66,-6,123,89,-40,-52,123,-68,-64,-4,-39,-33,-63,-59,-60,-61,]),'BYTE':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,56,-11,-14,-12,56,56,56,56,-74,-73,56,-15,-13,-16,56,56,56,56,-78,-77,-70,-81,-79,-69,56,-72,-71,-82,-80,56,56,56,-75,56,-76,56,56,56,]),'POSITIVEINT':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,57,-11,-14,-12,57,57,57,57,-74,-73,57,-15,-13,-16,57,57,57,57,-78,-77,-70,-81,-79,-69,57,-72,-71,-82,-80,57,57,57,-75,57,-76,57,57,57,]),'BY':([12,],[21,]),'ID':([1,21,29,30,52,55,62,73,74,76,78,80,81,82,83,86,87,88,89,91,92,96,99,100,101,102,103,104,105,106,107,108,109,112,113,115,116,117,118,119,120,121,122,123,124,126,128,132,133,135,138,139,140,141,142,143,144,145,146,147,149,150,152,153,155,156,157,158,159,160,161,165,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,193,195,196,197,199,200,201,202,203,204,206,208,209,210,211,213,215,217,219,223,224,227,228,230,231,235,236,237,238,241,],[6,-4,58,-11,-8,-14,-12,90,90,95,58,-41,102,90,-30,-4,-31,90,-127,-126,131,-7,90,-124,-125,-123,90,90,-36,90,90,-35,90,90,-32,-30,90,90,160,131,-56,131,-57,-55,-74,-50,-73,-43,131,-54,-15,-13,-16,-130,-122,-128,-129,-38,90,90,90,-4,90,90,90,-29,-30,90,90,-6,131,131,-53,131,131,-78,-77,-70,-81,-79,-69,131,-72,-71,-82,-80,131,213,131,-65,131,-37,-45,-30,90,-40,-44,90,-34,-29,-4,-67,-75,131,-51,-76,-42,-58,131,-50,-49,-66,-6,131,90,-40,-52,131,-68,-64,-4,-39,-33,-63,-59,-60,-61,]),'DESC':([21,29,30,55,62,78,138,139,140,],[-4,59,-11,-14,-12,59,-15,-13,-16,]),'AND':([52,96,120,122,123,126,135,162,163,166,184,199,202,206,209,210,211,213,221,223,227,228,236,237,238,241,],[-8,-7,-56,-57,-55,-50,-54,-50,200,-53,-65,-67,-51,-58,-50,-49,-66,-6,200,-52,-68,-64,-63,-59,-60,-61,]),'OR':([52,96,120,122,123,126,135,162,163,166,184,199,202,206,209,210,211,213,221,223,227,228,236,237,238,241,],[-8,-7,-56,-57,-55,-50,-54,-50,203,-53,-65,-67,-51,-58,-50,-49,-66,-6,203,-52,-68,-64,-63,-59,-60,-61,]),'ALL':([9,14,15,16,],[-4,22,-23,-24,]),'NEGATIVEINT':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,35,-11,-14,-12,35,35,35,35,-74,-73,35,-15,-13,-16,35,35,35,35,-78,-77,-70,-81,-79,-69,35,-72,-71,-82,-80,35,35,35,-75,35,-76,35,35,35,]),'UCASE':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,61,-11,-14,-12,61,61,61,61,-74,-73,61,-15,-13,-16,61,61,61,61,-78,-77,-70,-81,-79,-69,61,-72,-71,-82,-80,61,61,61,-75,61,-76,61,61,61,]),'GREATER':([52,96,120,122,123,126,135,162,184,199,206,207,209,211,212,213,214,216,227,228,232,236,237,238,241,],[-8,-7,-56,-57,-55,180,-54,180,180,-67,-58,180,180,180,180,-6,180,180,180,-64,180,-63,-59,-60,-61,]),'INT':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,64,-11,-14,-12,64,64,64,64,-74,-73,64,-15,-13,-16,64,64,64,64,-78,-77,-70,-81,-79,-69,64,-72,-71,-82,-80,64,64,64,-75,64,-76,64,64,64,]),'INTEGER':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,49,-11,-14,-12,49,49,49,49,-74,-73,49,-15,-13,-16,49,49,49,49,-78,-77,-70,-81,-79,-69,49,-72,-71,-82,-80,49,49,49,-75,49,-76,49,49,49,]),'FLOAT':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,66,-11,-14,-12,66,66,66,66,-74,-73,66,-15,-13,-16,66,66,66,66,-78,-77,-70,-81,-79,-69,66,-72,-71,-82,-80,66,66,66,-75,66,-76,66,66,66,]),'NONNEGINT':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,60,-11,-14,-12,60,60,60,60,-74,-73,60,-15,-13,-16,60,60,60,60,-78,-77,-70,-81,-79,-69,60,-72,-71,-82,-80,60,60,60,-75,60,-76,60,60,60,]),'ISIRI':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,68,-11,-14,-12,68,68,68,68,-74,-73,68,-15,-13,-16,68,68,68,68,-78,-77,-70,-81,-79,-69,68,-72,-71,-82,-80,68,68,68,-75,68,-76,68,68,68,]),'WHERE':([22,23,24,32,],[31,-121,33,-120,]),'DATATYPE':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,41,-11,-14,-12,41,41,41,41,-74,-73,41,-15,-13,-16,41,41,41,41,-78,-77,-70,-81,-79,-69,41,-72,-71,-82,-80,41,41,41,-75,41,-76,41,41,41,]),'BOOLEAN':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,69,-11,-14,-12,69,69,69,69,-74,-73,69,-15,-13,-16,69,69,69,69,-78,-77,-70,-81,-79,-69,69,-72,-71,-82,-80,69,69,69,-75,69,-76,69,69,69,]),'FILTER':([52,73,74,80,82,83,86,87,88,96,103,104,105,106,107,108,109,112,113,115,116,117,120,122,123,126,132,135,141,142,143,144,145,146,147,149,150,152,153,155,156,157,158,159,160,166,184,186,187,188,189,190,191,193,195,196,197,199,202,204,206,209,210,211,213,217,219,223,227,228,230,231,235,236,237,238,241,],[-8,92,92,-41,92,-30,-4,-31,92,-7,92,92,-36,92,92,-35,92,92,-32,-30,92,92,-56,-57,-55,-50,-43,-54,-130,-122,-128,-129,-38,92,92,92,-4,92,92,92,-29,-30,92,92,-6,-53,-65,-37,-45,-30,92,-40,-44,92,-34,-29,-4,-67,-51,-42,-58,-50,-49,-66,-6,92,-40,-52,-68,-64,-4,-39,-33,-63,-59,-60,-61,]),'DOUBLE':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,65,-11,-14,-12,65,65,65,65,-74,-73,65,-15,-13,-16,65,65,65,65,-78,-77,-70,-81,-79,-69,65,-72,-71,-82,-80,65,65,65,-75,65,-76,65,65,65,]),'NONPOSINT':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,71,-11,-14,-12,71,71,71,71,-74,-73,71,-15,-13,-16,71,71,71,71,-78,-77,-70,-81,-79,-69,71,-72,-71,-82,-80,71,71,71,-75,71,-76,71,71,71,]),'UNSIGNEDLONG':([21,29,30,55,62,78,92,119,121,124,128,133,138,139,140,161,165,168,169,170,171,172,173,174,175,176,177,178,179,180,181,183,185,200,201,203,208,215,224,],[-4,72,-11,-14,-12,72,72,72,72,-74,-73,72,-15,-13,-16,72,72,72,72,-78,-77,-70,-81,-79,-69,72,-72,-71,-82,-80,72,72,72,-75,72,-76,72,72,72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'LOGOP':([163,221,],[201,201,]),'regex_flag':([234,],[237,]),'parse_sparql':([0,],[2,]),'rest_union_block':([86,150,192,197,229,230,],[112,190,218,219,218,235,]),'prefix':([0,3,],[3,3,]),'triple':([73,74,82,88,103,104,106,107,109,112,116,117,146,147,149,152,153,155,158,159,189,193,217,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'union_block':([73,74,88,109,116,149,158,193,],[79,79,114,79,114,114,114,114,]),'query':([4,],[8,]),'var_list':([14,],[24,]),'subject':([73,74,82,88,103,104,106,107,109,112,116,117,146,147,149,152,153,155,158,159,189,193,217,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'binary_func':([92,119,121,133,161,165,168,169,176,181,183,185,201,208,215,224,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'order_by':([8,],[11,]),'distinct':([9,],[14,]),'express_arg':([92,119,121,133,161,165,168,169,176,181,183,185,201,208,215,224,],[126,162,126,184,162,162,207,209,211,212,214,216,126,162,227,232,]),'group_graph_pattern':([73,74,109,],[85,93,151,]),'pjoin_block':([73,74,88,109,112,116,149,153,158,193,],[86,86,86,86,154,86,86,194,86,86,]),'var_order_list':([21,],[29,]),'prefix_list':([0,3,],[4,7,]),'empty':([0,3,8,9,11,19,21,73,74,82,86,88,103,109,112,116,117,146,147,149,150,153,155,158,192,193,197,229,230,],[5,5,13,16,20,28,30,87,87,105,113,87,105,87,87,87,105,105,105,87,113,87,105,87,113,87,113,113,113,]),'ARITOP':([126,162,184,207,209,211,212,214,216,227,232,],[176,176,176,176,176,176,176,176,176,176,176,]),'predicate':([81,],[99,]),'RELOP':([126,162,184,207,209,211,212,214,216,227,232,],[169,169,215,215,169,215,215,215,215,215,215,]),'object':([99,],[142,]),'rest_join_block':([82,103,117,146,147,155,],[108,145,108,186,108,195,]),'pattern_arg':([226,239,],[234,240,]),'offset':([19,],[27,]),'join_block':([73,74,88,106,109,112,116,149,152,153,158,193,217,],[83,83,115,148,83,83,157,188,192,83,157,188,229,]),'express_rel':([92,119,121,161,165,169,201,208,],[132,163,166,163,163,210,221,225,]),'desc_var':([29,78,],[62,98,]),'UNARYOP':([92,119,121,133,161,165,168,169,176,181,183,185,201,208,215,224,],[133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,]),'uri':([29,73,74,78,81,82,88,92,99,103,104,106,107,109,112,116,117,119,121,133,146,147,149,152,153,155,158,159,161,165,168,169,176,181,183,185,189,193,201,208,215,217,224,],[63,91,91,63,100,91,91,135,143,91,91,91,91,91,91,91,91,135,135,135,91,91,91,91,91,91,91,91,135,135,135,135,135,135,135,135,91,91,135,135,135,91,135,]),'bgp':([73,74,82,88,103,104,106,107,109,112,116,117,146,147,149,152,153,155,158,159,189,193,217,],[82,82,103,117,103,146,147,150,82,82,147,103,103,103,147,82,82,103,147,197,150,147,117,]),'limit':([11,],[19,]),'unary_func':([29,78,92,119,121,133,161,165,168,169,176,181,183,185,201,208,215,224,],[70,70,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,]),'expression':([119,161,165,201,],[164,198,205,222,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> parse_sparql","S'",1,None,None,None),
  ('parse_sparql -> prefix_list query order_by limit offset','parse_sparql',5,'p_parse_sparql','sparql_parser.py',168),
  ('prefix_list -> prefix prefix_list','prefix_list',2,'p_prefix_list','sparql_parser.py',176),
  ('prefix_list -> empty','prefix_list',1,'p_empty_prefix_list','sparql_parser.py',184),
  ('empty -> <empty>','empty',0,'p_empty','sparql_parser.py',192),
  ('prefix -> PREFIX ID COLON URI','prefix',4,'p_prefix','sparql_parser.py',199),
  ('uri -> ID COLON ID','uri',3,'p_uri_0','sparql_parser.py',206),
  ('uri -> ID COLON URI','uri',3,'p_uri_1','sparql_parser.py',219),
  ('uri -> URI','uri',1,'p_uri_2','sparql_parser.py',226),
  ('order_by -> ORDER BY var_order_list desc_var','order_by',4,'p_order_by_0','sparql_parser.py',233),
  ('order_by -> empty','order_by',1,'p_order_by_1','sparql_parser.py',240),
  ('var_order_list -> empty','var_order_list',1,'p_var_order_list_0','sparql_parser.py',247),
  ('var_order_list -> var_order_list desc_var','var_order_list',2,'p_var_order_list_1','sparql_parser.py',254),
  ('desc_var -> DESC LPAR VARIABLE RPAR','desc_var',4,'p_desc_var_0','sparql_parser.py',261),
  ('desc_var -> VARIABLE','desc_var',1,'p_desc_var_1','sparql_parser.py',268),
  ('desc_var -> ASC LPAR VARIABLE RPAR','desc_var',4,'p_desc_var_2','sparql_parser.py',275),
  ('desc_var -> unary_func LPAR desc_var RPAR','desc_var',4,'p_desc_var_3','sparql_parser.py',282),
  ('limit -> LIMIT NUMBER','limit',2,'p_limit_0','sparql_parser.py',289),
  ('limit -> empty','limit',1,'p_limit_1','sparql_parser.py',296),
  ('offset -> OFFSET NUMBER','offset',2,'p_offset_0','sparql_parser.py',303),
  ('offset -> empty','offset',1,'p_offset_1','sparql_parser.py',310),
  ('query -> SELECT distinct var_list WHERE LKEY group_graph_pattern RKEY','query',7,'p_query_0','sparql_parser.py',317),
  ('query -> SELECT distinct ALL WHERE LKEY group_graph_pattern RKEY','query',7,'p_query_1','sparql_parser.py',324),
  ('distinct -> DISTINCT','distinct',1,'p_distinct_0','sparql_parser.py',331),
  ('distinct -> empty','distinct',1,'p_distinct_1','sparql_parser.py',338),
  ('group_graph_pattern -> union_block','group_graph_pattern',1,'p_ggp_0','sparql_parser.py',345),
  ('union_block -> pjoin_block rest_union_block POINT pjoin_block','union_block',4,'p_union_block_0','sparql_parser.py',352),
  ('union_block -> pjoin_block rest_union_block pjoin_block','union_block',3,'p_union_block_1','sparql_parser.py',361),
  ('union_block -> pjoin_block rest_union_block','union_block',2,'p_union_block_2','sparql_parser.py',373),
  ('pjoin_block -> LKEY join_block RKEY','pjoin_block',3,'p_ppjoin_block_0','sparql_parser.py',380),
  ('pjoin_block -> join_block','pjoin_block',1,'p_ppjoin_block_1','sparql_parser.py',387),
  ('pjoin_block -> empty','pjoin_block',1,'p_ppjoin_block_2','sparql_parser.py',394),
  ('rest_union_block -> empty','rest_union_block',1,'p_rest_union_block_0','sparql_parser.py',401),
  ('rest_union_block -> UNION LKEY join_block rest_union_block RKEY rest_union_block','rest_union_block',6,'p_rest_union_block_1','sparql_parser.py',408),
  ('join_block -> LKEY union_block RKEY rest_join_block','join_block',4,'p_join_block_0','sparql_parser.py',415),
  ('join_block -> bgp rest_join_block','join_block',2,'p_join_block_1','sparql_parser.py',427),
  ('rest_join_block -> empty','rest_join_block',1,'p_rest_join_block_0','sparql_parser.py',434),
  ('rest_join_block -> POINT bgp rest_join_block','rest_join_block',3,'p_rest_join_block_1','sparql_parser.py',441),
  ('rest_join_block -> bgp rest_join_block','rest_join_block',2,'p_rest_join_block_2','sparql_parser.py',448),
  ('bgp -> LKEY bgp UNION bgp rest_union_block RKEY','bgp',6,'p_bgp_0','sparql_parser.py',455),
  ('bgp -> bgp UNION bgp rest_union_block','bgp',4,'p_bgp_01','sparql_parser.py',463),
  ('bgp -> triple','bgp',1,'p_bgp_1','sparql_parser.py',471),
  ('bgp -> FILTER LPAR expression RPAR','bgp',4,'p_bgp_2','sparql_parser.py',478),
  ('bgp -> FILTER express_rel','bgp',2,'p_bgp_3','sparql_parser.py',485),
  ('bgp -> OPTIONAL LKEY group_graph_pattern RKEY','bgp',4,'p_bgp_4','sparql_parser.py',492),
  ('bgp -> LKEY join_block RKEY','bgp',3,'p_bgp_6','sparql_parser.py',506),
  ('expression -> express_rel LOGOP expression','expression',3,'p_expression_0','sparql_parser.py',516),
  ('expression -> express_rel','expression',1,'p_expression_1','sparql_parser.py',523),
  ('expression -> LPAR expression RPAR','expression',3,'p_expression_2','sparql_parser.py',530),
  ('express_rel -> express_arg RELOP express_rel','express_rel',3,'p_express_rel_0','sparql_parser.py',537),
  ('express_rel -> express_arg','express_rel',1,'p_express_rel_1','sparql_parser.py',544),
  ('express_rel -> LPAR express_rel RPAR','express_rel',3,'p_express_rel_2','sparql_parser.py',551),
  ('express_rel -> NEG LPAR expression RPAR','express_rel',4,'p_express_rel_3','sparql_parser.py',558),
  ('express_rel -> NEG express_rel','express_rel',2,'p_express_rel_4','sparql_parser.py',565),
  ('express_arg -> uri','express_arg',1,'p_express_arg_0','sparql_parser.py',572),
  ('express_arg -> VARIABLE','express_arg',1,'p_express_arg_1','sparql_parser.py',579),
  ('express_arg -> CONSTANT','express_arg',1,'p_express_arg_2','sparql_parser.py',586),
  ('express_arg -> NUMBER','express_arg',1,'p_express_arg_3','sparql_parser.py',593),
  ('express_arg -> NUMBER POINT NUMBER','express_arg',3,'p_express_arg_03','sparql_parser.py',600),
  ('express_arg -> REGEX LPAR express_arg COMA pattern_arg regex_flag','express_arg',6,'p_express_arg_4','sparql_parser.py',608),
  ('regex_flag -> RPAR','regex_flag',1,'p_regex_flags_0','sparql_parser.py',615),
  ('regex_flag -> COMA pattern_arg RPAR','regex_flag',3,'p_regex_flags_1','sparql_parser.py',622),
  ('pattern_arg -> CONSTANT','pattern_arg',1,'p_pattern_arg_0','sparql_parser.py',629),
  ('express_arg -> binary_func LPAR express_arg COMA express_arg RPAR','express_arg',6,'p_express_arg_5','sparql_parser.py',636),
  ('express_arg -> unary_func LPAR express_arg RPAR','express_arg',4,'p_express_arg_6','sparql_parser.py',643),
  ('express_arg -> UNARYOP express_arg','express_arg',2,'p_express_arg_7','sparql_parser.py',650),
  ('express_arg -> express_arg ARITOP express_arg','express_arg',3,'p_express_arg_8','sparql_parser.py',657),
  ('express_arg -> LPAR express_arg RPAR','express_arg',3,'p_express_arg_9','sparql_parser.py',664),
  ('express_arg -> express_arg RELOP express_arg','express_arg',3,'p_express_arg_10','sparql_parser.py',671),
  ('ARITOP -> PLUS','ARITOP',1,'p_arit_op_0','sparql_parser.py',678),
  ('ARITOP -> MINUS','ARITOP',1,'p_arit_op_1','sparql_parser.py',685),
  ('ARITOP -> TIMES','ARITOP',1,'p_arit_op_2','sparql_parser.py',692),
  ('ARITOP -> DIV','ARITOP',1,'p_arit_op_3','sparql_parser.py',699),
  ('UNARYOP -> PLUS','UNARYOP',1,'p_unaryarit_op_1','sparql_parser.py',706),
  ('UNARYOP -> MINUS','UNARYOP',1,'p_unaryarit_op_2','sparql_parser.py',713),
  ('LOGOP -> AND','LOGOP',1,'p_logical_op_0','sparql_parser.py',720),
  ('LOGOP -> OR','LOGOP',1,'p_logical_op_1','sparql_parser.py',727),
  ('RELOP -> EQUALS','RELOP',1,'p_relational_op_0','sparql_parser.py',734),
  ('RELOP -> LESS','RELOP',1,'p_relational_op_1','sparql_parser.py',741),
  ('RELOP -> LESSEQ','RELOP',1,'p_relational_op_2','sparql_parser.py',748),
  ('RELOP -> GREATER','RELOP',1,'p_relational_op_3','sparql_parser.py',755),
  ('RELOP -> GREATEREQ','RELOP',1,'p_relational_op_4','sparql_parser.py',762),
  ('RELOP -> NEQUALS','RELOP',1,'p_relational_op_5','sparql_parser.py',769),
  ('binary_func -> REGEX','binary_func',1,'p_binary_0','sparql_parser.py',776),
  ('binary_func -> SAMETERM','binary_func',1,'p_binary_1','sparql_parser.py',783),
  ('binary_func -> LANGMATCHES','binary_func',1,'p_binary_2','sparql_parser.py',790),
  ('binary_func -> CONSTANT','binary_func',1,'p_binary_3','sparql_parser.py',797),
  ('binary_func -> CONTAINS','binary_func',1,'p_binary_4','sparql_parser.py',804),
  ('unary_func -> BOUND','unary_func',1,'p_unary_0','sparql_parser.py',811),
  ('unary_func -> ISIRI','unary_func',1,'p_unary_1','sparql_parser.py',818),
  ('unary_func -> ISURI','unary_func',1,'p_unary_2','sparql_parser.py',825),
  ('unary_func -> ISBLANK','unary_func',1,'p_unary_3','sparql_parser.py',832),
  ('unary_func -> ISLITERAL','unary_func',1,'p_unary_4','sparql_parser.py',839),
  ('unary_func -> LANG','unary_func',1,'p_unary_5','sparql_parser.py',846),
  ('unary_func -> DATATYPE','unary_func',1,'p_unary_6','sparql_parser.py',853),
  ('unary_func -> STR','unary_func',1,'p_unary_7','sparql_parser.py',860),
  ('unary_func -> UPPERCASE','unary_func',1,'p_unary_8','sparql_parser.py',867),
  ('unary_func -> DOUBLE','unary_func',1,'p_unary_9','sparql_parser.py',874),
  ('unary_func -> INTEGER','unary_func',1,'p_unary_9','sparql_parser.py',875),
  ('unary_func -> DECIMAL','unary_func',1,'p_unary_9','sparql_parser.py',876),
  ('unary_func -> FLOAT','unary_func',1,'p_unary_9','sparql_parser.py',877),
  ('unary_func -> STRING','unary_func',1,'p_unary_9','sparql_parser.py',878),
  ('unary_func -> BOOLEAN','unary_func',1,'p_unary_9','sparql_parser.py',879),
  ('unary_func -> DATETIME','unary_func',1,'p_unary_9','sparql_parser.py',880),
  ('unary_func -> NONPOSINT','unary_func',1,'p_unary_9','sparql_parser.py',881),
  ('unary_func -> NEGATIVEINT','unary_func',1,'p_unary_9','sparql_parser.py',882),
  ('unary_func -> LONG','unary_func',1,'p_unary_9','sparql_parser.py',883),
  ('unary_func -> INT','unary_func',1,'p_unary_9','sparql_parser.py',884),
  ('unary_func -> SHORT','unary_func',1,'p_unary_9','sparql_parser.py',885),
  ('unary_func -> BYTE','unary_func',1,'p_unary_9','sparql_parser.py',886),
  ('unary_func -> NONNEGINT','unary_func',1,'p_unary_9','sparql_parser.py',887),
  ('unary_func -> UNSIGNEDLONG','unary_func',1,'p_unary_9','sparql_parser.py',888),
  ('unary_func -> UNSIGNEDINT','unary_func',1,'p_unary_9','sparql_parser.py',889),
  ('unary_func -> UNSIGNEDSHORT','unary_func',1,'p_unary_9','sparql_parser.py',890),
  ('unary_func -> UNSIGNEDBYTE','unary_func',1,'p_unary_9','sparql_parser.py',891),
  ('unary_func -> POSITIVEINT','unary_func',1,'p_unary_9','sparql_parser.py',892),
  ('unary_func -> ID COLON ID','unary_func',3,'p_unary_10','sparql_parser.py',899),
  ('unary_func -> uri','unary_func',1,'p_unary_11','sparql_parser.py',906),
  ('unary_func -> UCASE','unary_func',1,'p_unary_12','sparql_parser.py',913),
  ('unary_func -> LCASE','unary_func',1,'p_unary_13','sparql_parser.py',920),
  ('var_list -> var_list VARIABLE','var_list',2,'p_var_list','sparql_parser.py',927),
  ('var_list -> VARIABLE','var_list',1,'p_single_var_list','sparql_parser.py',934),
  ('triple -> subject predicate object','triple',3,'p_triple_0','sparql_parser.py',941),
  ('predicate -> ID','predicate',1,'p_predicate_rdftype','sparql_parser.py',948),
  ('predicate -> uri','predicate',1,'p_predicate_uri','sparql_parser.py',962),
  ('predicate -> VARIABLE','predicate',1,'p_predicate_var','sparql_parser.py',969),
  ('subject -> uri','subject',1,'p_subject_uri','sparql_parser.py',976),
  ('subject -> VARIABLE','subject',1,'p_subject_variable','sparql_parser.py',983),
  ('object -> uri','object',1,'p_object_uri','sparql_parser.py',991),
  ('object -> VARIABLE','object',1,'p_object_variable','sparql_parser.py',998),
  ('object -> CONSTANT','object',1,'p_object_constant','sparql_parser.py',1005),
]
